import 'package:flutter/material.dart';
import 'package:flutter/foundation.dart' show kDebugMode, kIsWeb;
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:provider/provider.dart';
import 'package:firebase_core/firebase_core.dart' as fb_core;
import 'firebase_options.dart';
import 'features/splash/splash_screen.dart';
import 'features/home/home_screen.dart';
import 'presentation/pages/menu_screen.dart';
import 'presentation/pages/login_screen.dart';
import 'presentation/pages/qr_scanner_page.dart';
import 'presentation/pages/cucina/cucina_screen.dart';
import 'presentation/pages/sala/sala_screen.dart';
import 'presentation/pages/proprietario_screen.dart';
import 'presentation/pages/staff_screen.dart'; // ✅ AGGIUNTO
import 'presentation/pages/archivio_screen.dart';
import 'presentation/pages/statistiche_screen.dart';
import 'core/providers/cart_provider.dart';
import 'core/providers/menu_provider.dart';
import 'core/providers/ordini_provider.dart';
import 'core/providers/auth_provider.dart';
import 'core/providers/session_provider.dart';
import 'core/repositories/menu_repository.dart';
// menu_service import removed - avoid importing MenuService only for an
// inline debug save. If a debug seeding helper is needed later we can add
// it guarded by a dev flag.

final navigatorKey = GlobalKey<NavigatorState>();

void main() async {
  WidgetsFlutterBinding.ensureInitialized();
  debugPrint('ENTRYPOINT: lib/main.dart starting at ${DateTime.now().toIso8601String()}');
  
  // Only initialize Firebase here if it hasn't already been initialized by
  // the delegating entrypoint. This avoids races and double-initialization
  // when the app is launched via the `lib/main.dart` delegator.
  try {
    if (fb_core.Firebase.apps.isEmpty) {
      // For web we need to pass explicit options generated by FlutterFire CLI.
      // For native platforms (Android/iOS) we can call initializeApp() without
      // options so the native configuration (google-services.json /
      // GoogleService-Info.plist) is used when present.
      if (kIsWeb) {
        await fb_core.Firebase.initializeApp(
          options: DefaultFirebaseOptions.currentPlatform,
        );
        debugPrint("✅ Firebase inizializzato con successo (web options)!");
      } else {
        await fb_core.Firebase.initializeApp();
        debugPrint("✅ Firebase inizializzato con successo (native)!");
      }
    } else {
      debugPrint("⚠️ Firebase already initialized, skipping init.");
    }
  } catch (e) {
    debugPrint("❌ Errore inizializzazione Firebase: $e");
  }

  // In debug mode, point Firestore to the local emulator so reads/writes go to
  // the Emulator Suite (10.0.2.2 routes to host machine from Android emulator).
  if (kDebugMode) {
    try {
      FirebaseFirestore.instance.useFirestoreEmulator('10.0.2.2', 8080);
      debugPrint('ℹ️ Firestore configured to use emulator at 10.0.2.2:8080');
    } catch (e) {
      debugPrint('⚠️ Could not configure Firestore emulator: $e');
    }
  }
  // NOTE: removed automatic debug offer creation. Creating offers
  // automatically at startup confused testing and led to duplicate
  // entries; if you need to programmatically seed data use a dedicated
  // debug routine or a dev-only flag here.
  
  runApp(const MyApp());
}

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    return MultiProvider(
      providers: [
        Provider<MenuRepository>(create: (_) => MenuRepository()),
        ChangeNotifierProvider<MenuProvider>(
          create: (context) => MenuProvider(context.read<MenuRepository>()),
        ),
        ChangeNotifierProvider<CartProvider>(create: (_) => CartProvider()),
        ChangeNotifierProvider<OrdiniProvider>(create: (_) => OrdiniProvider()),
        ChangeNotifierProvider<AuthProvider>(create: (_) => AuthProvider()),
        ChangeNotifierProvider<SessionProvider>(create: (_) => SessionProvider()),
      ],
      child: MaterialApp(
        navigatorKey: navigatorKey,
        title: 'Ristorante Mille Vetrine',
        theme: ThemeData.dark().copyWith(
          scaffoldBackgroundColor: Colors.black,
          appBarTheme: const AppBarTheme(
            backgroundColor: Colors.transparent,
            elevation: 0,
            iconTheme: IconThemeData(color: Colors.white),
          ),
          colorScheme: ColorScheme.fromSwatch().copyWith(
            secondary: Colors.orange,
          ),
        ),
        home: const SplashScreen(),
        routes: {
          '/home': (context) => const HomeScreen(),
          '/menu': (context) => const MenuScreen(),
          '/login': (context) => const LoginScreen(),
          '/qr_scanner': (context) => const QRScannerPage(),
          '/cucina': (context) => const CucinaScreen(),
          '/sala': (context) => const SalaScreen(),
          '/proprietario': (context) => const ProprietarioScreen(),
          '/staff': (context) => const StaffScreen(), // ✅ AGGIUNTO
          '/archivio': (context) => const ArchivioScreen(),
          '/statistiche': (context) => const StatisticheScreen(),
        },
        debugShowCheckedModeBanner: false,
      ),
    );
  }
}