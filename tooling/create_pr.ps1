<#
  tooling/create_pr.ps1

  Script interattivo per creare un branch, committare le modifiche, pushare e aprire una PR.

  Usage (PowerShell, run from repo root):
    cd C:\Users\Anselmo\Documents\ordinazione
    tooling\create_pr.ps1 -BranchName ci/emulator-tests -BaseBranch feature/new_app_clean

  Requirements:
  - Git CLI installed and autenticato per push
  - (Opzionale) GitHub CLI (`gh`) per aprire la PR automaticamente
#>

param(
  [string]$BranchName = 'ci/emulator-tests',
  [string]$BaseBranch = 'feature/new_app_clean',
  [string]$CommitMessage = "CI: emulator tests + tooling",
  [switch]$OpenPR
)

function ExecGit([string[]]$gitArgs) {
  $proc = Start-Process -FilePath git -ArgumentList $gitArgs -NoNewWindow -RedirectStandardOutput -RedirectStandardError -PassThru -Wait
  $out = $proc.StandardOutput.ReadToEnd() + $proc.StandardError.ReadToEnd()
  if ($proc.ExitCode -ne 0) { Write-Host $out; throw "git $($args -join ' ') failed with exit $($proc.ExitCode)" }
  return $out.Trim()
}

# Ensure we are in a git repo
if (-not (Test-Path .git)) {
  Write-Error "Current folder does not look like a git repo (no .git). Run this script from the repository root.";
  exit 1
}

Write-Host "Checking git status..."
$status = git status --porcelain
if ($status) {
  Write-Host "Uncommitted changes detected:" -ForegroundColor Yellow
  Write-Host $status
  $answer = Read-Host "Include these changes in the commit and continue? (y/n)"
  if ($answer -ne 'y') { Write-Host 'Aborted by user.'; exit 1 }
}

Write-Host "Creating / switching to branch '$BranchName'..."
try {
  ExecGit @('switch', '-c', $BranchName)
} catch {
  Write-Host "Branch may already exist, switching to it..."
  ExecGit @('switch', $BranchName)
}

Write-Host "Staging changes..."
ExecGit @('add', '.')

Write-Host "Committing..."
try {
  ExecGit @('commit', '-m', $CommitMessage)
} catch {
  Write-Host "Nothing to commit or commit failed; continuing..." -ForegroundColor Yellow
}

Write-Host "Pushing branch to origin..."
ExecGit @('push', '-u', 'origin', $BranchName)

# Determine remote repo owner/name
$remote = ExecGit @('config', '--get', 'remote.origin.url')
$owner = $null; $repo = $null
if ($remote -match 'github.com[:/](.+?)/(.+?)(?:\.git)?$') {
  $owner = $Matches[1]
  $repo = $Matches[2]
}

if ($OpenPR) {
  # default OpenPR to true when not explicitly provided
  if (-not $PSBoundParameters.ContainsKey('OpenPR')) { $OpenPR = $true }
  # If gh exists, use it
  $ghInstalled = (& gh --version) 2>$null
  if ($ghInstalled) {
    Write-Host "Creating PR with gh CLI..."
    $body = @"
Automated PR generated by tooling/create_pr.ps1

Includes: CI workflow for emulator-backed tests, tooling scripts and test code.
"@
    gh pr create --base $BaseBranch --head $BranchName --title "$CommitMessage" --body $body
    Write-Host "PR created via gh."
  } else {
    if ($owner -and $repo) {
      $url = "https://github.com/$owner/$repo/compare/$BaseBranch...$BranchName?expand=1"
      Write-Host "gh CLI not found. Open this URL in your browser to create the PR:" -ForegroundColor Yellow
      Write-Host $url
    } else {
      Write-Host "gh CLI not found and remote origin URL couldn't be parsed. Create the PR manually on GitHub." -ForegroundColor Yellow
    }
  }
}

Write-Host "Done. Branch '$BranchName' pushed."
